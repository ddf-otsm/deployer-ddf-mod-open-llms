AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI Testing Agent - Distributed testing with open source LLMs'

Parameters:
  Environment:
    Type: String
    AllowedValues: [dev, staging, prod]
    Default: dev
    Description: Environment name
  
  DeploymentType:
    Type: String
    AllowedValues: [ecs-fargate, ec2-gpu, lambda]
    Default: ecs-fargate
    Description: Deployment type
  
  InstanceCount:
    Type: Number
    Default: 2
    MinValue: 0
    MaxValue: 20
    Description: Number of instances to run
  
  AutoStop:
    Type: String
    AllowedValues: [enabled, disabled]
    Default: enabled
    Description: Enable auto-stop functionality

Conditions:
  IsProduction: !Equals [!Ref Environment, prod]
  AutoStopEnabled: !Equals [!Ref AutoStop, enabled]
  UseFargate: !Equals [!Ref DeploymentType, ecs-fargate]

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub 'deployer-ddf-mod-llm-models-${Environment}-vpc'
        - Key: Project
          Value: deployer-ddf-mod-llm-models
        - Key: Environment
          Value: !Ref Environment

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'deployer-ddf-mod-llm-models-${Environment}-igw'
        - Key: Project
          Value: deployer-ddf-mod-llm-models

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'deployer-ddf-mod-llm-models-${Environment}-public-subnet-1'
        - Key: Project
          Value: deployer-ddf-mod-llm-models

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'deployer-ddf-mod-llm-models-${Environment}-public-subnet-2'
        - Key: Project
          Value: deployer-ddf-mod-llm-models

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub 'deployer-ddf-mod-llm-models-${Environment}-private-subnet-1'
        - Key: Project
          Value: deployer-ddf-mod-llm-models

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: !Sub 'deployer-ddf-mod-llm-models-${Environment}-private-subnet-2'
        - Key: Project
          Value: deployer-ddf-mod-llm-models

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'deployer-ddf-mod-llm-models-${Environment}-public-routes'
        - Key: Project
          Value: deployer-ddf-mod-llm-models

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Security Groups
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'deployer-ddf-mod-llm-models-${Environment}-alb-sg'
      GroupDescription: Security group for AI Testing Agent load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub 'deployer-ddf-mod-llm-models-${Environment}-alb-sg'
        - Key: Project
          Value: deployer-ddf-mod-llm-models

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'deployer-ddf-mod-llm-models-${Environment}-ecs-sg'
      GroupDescription: Security group for AI Testing Agent ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 11434
          ToPort: 11434
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'deployer-ddf-mod-llm-models-${Environment}-ecs-sg'
        - Key: Project
          Value: deployer-ddf-mod-llm-models

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub 'deployer-ddf-mod-llm-models-${Environment}'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !If [IsProduction, FARGATE, FARGATE_SPOT]
          Weight: !If [IsProduction, 3, 1]
        - CapacityProvider: !If [IsProduction, FARGATE_SPOT, FARGATE]
          Weight: !If [IsProduction, 1, 3]
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Project
          Value: deployer-ddf-mod-llm-models
        - Key: Environment
          Value: !Ref Environment

  # IAM Roles for deployer-ddf-mod-llm-models
  DeployerDDFModLLMModelsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'deployer-ddf-mod-llm-models-${Environment}-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
      Tags:
        - Key: Project
          Value: deployer-ddf-mod-llm-models
        - Key: Environment
          Value: !Ref Environment

  DeployerDDFModLLMModelsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'deployer-ddf-mod-llm-models-${Environment}-task-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub '${ResultsBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Ref ResultsBucket
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt TestQueue.Arn
        - PolicyName: BedrockLLMAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetFoundationModel
                  - bedrock:ListFoundationModels
                Resource: 
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:foundation-model/meta.llama3-1-70b-instruct-v1:0'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:foundation-model/meta.codellama-34b-instruct-v1:0'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'
      Tags:
        - Key: Project
          Value: deployer-ddf-mod-llm-models
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/deployer-ddf-mod-llm-models-${Environment}'
      RetentionInDays: !If [IsProduction, 30, 7]
      Tags:
        - Key: Project
          Value: deployer-ddf-mod-llm-models
        - Key: Environment
          Value: !Ref Environment

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'deployer-ddf-mod-llm-models-${Environment}'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !If [IsProduction, 2048, 1024]
      Memory: !If [IsProduction, 4096, 2048]
      ExecutionRoleArn: !GetAtt DeployerDDFModLLMModelsExecutionRole.Arn
      TaskRoleArn: !GetAtt DeployerDDFModLLMModelsTaskRole.Arn
      ContainerDefinitions:
        - Name: deployer-ddf-mod-llm-models
          Image: ollama/ollama:latest
          Essential: true
          PortMappings:
            - ContainerPort: 11434
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: SQS_QUEUE_URL
              Value: !Ref TestQueue
            - Name: S3_BUCKET
              Value: !Ref ResultsBucket
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:11434/api/tags || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
      Tags:
        - Key: Project
          Value: deployer-ddf-mod-llm-models
        - Key: Environment
          Value: !Ref Environment

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: deployer-ddf-mod-llm-models
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref InstanceCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: deployer-ddf-mod-llm-models
          ContainerPort: 11434
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: 120
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      Tags:
        - Key: Project
          Value: deployer-ddf-mod-llm-models
        - Key: Environment
          Value: !Ref Environment

  # Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'deployer-ddf-mod-llm-models-${Environment}-alb'
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Project
          Value: deployer-ddf-mod-llm-models
        - Key: Environment
          Value: !Ref Environment

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 'deployer-ddf-mod-llm-models-${Environment}-tg'
      Port: 11434
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /api/tags
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Project
          Value: deployer-ddf-mod-llm-models
        - Key: Environment
          Value: !Ref Environment

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # SQS Queue for distributed testing
  TestQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'deployer-ddf-mod-llm-models-${Environment}-queue'
      VisibilityTimeoutSeconds: 300
      MessageRetentionPeriod: 1209600  # 14 days
      ReceiveMessageWaitTimeSeconds: 20
      Tags:
        - Key: Project
          Value: deployer-ddf-mod-llm-models
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket for test results
  ResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'deployer-ddf-mod-llm-models-${Environment}-results-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldResults
            Status: Enabled
            ExpirationInDays: !If [IsProduction, 90, 30]
            NoncurrentVersionExpirationInDays: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Project
          Value: deployer-ddf-mod-llm-models
        - Key: Environment
          Value: !Ref Environment

  # Auto-stop Lambda function (if enabled)
  AutoStopFunction:
    Type: AWS::Lambda::Function
    Condition: AutoStopEnabled
    Properties:
      FunctionName: !Sub 'deployer-ddf-mod-llm-models-${Environment}-auto-stop'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt AutoStopRole.Arn
      Timeout: 60
      Environment:
        Variables:
          CLUSTER_NAME: !Ref ECSCluster
          SERVICE_NAME: deployer-ddf-mod-llm-models
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          
          def lambda_handler(event, context):
              ecs = boto3.client('ecs')
              cluster_name = os.environ['CLUSTER_NAME']
              service_name = os.environ['SERVICE_NAME']
              
              try:
                  # Check if service has been idle
                  response = ecs.describe_services(
                      cluster=cluster_name,
                      services=[service_name]
                  )
                  
                  if response['services']:
                      service = response['services'][0]
                      running_count = service['runningCount']
                      
                      # Simple auto-stop logic - scale to 0 if no activity
                      # In production, this would check CloudWatch metrics
                      if running_count > 0:
                          print(f"Scaling down service {service_name}")
                          ecs.update_service(
                              cluster=cluster_name,
                              service=service_name,
                              desiredCount=0
                          )
                          
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Auto-stop check completed')
                  }
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'Error: {str(e)}')
                  }
      Tags:
        - Key: Project
          Value: deployer-ddf-mod-llm-models
        - Key: Environment
          Value: !Ref Environment

  AutoStopRole:
    Type: AWS::IAM::Role
    Condition: AutoStopEnabled
    Properties:
      RoleName: !Sub 'deployer-ddf-mod-llm-models-${Environment}-auto-stop-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ECSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: '*'
      Tags:
        - Key: Project
          Value: deployer-ddf-mod-llm-models
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Event Rule for auto-stop (if enabled)
  AutoStopSchedule:
    Type: AWS::Events::Rule
    Condition: AutoStopEnabled
    Properties:
      Name: !Sub 'deployer-ddf-mod-llm-models-${Environment}-auto-stop-schedule'
      Description: Schedule for auto-stop functionality
      ScheduleExpression: rate(15 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt AutoStopFunction.Arn
          Id: AutoStopTarget

  AutoStopPermission:
    Type: AWS::Lambda::Permission
    Condition: AutoStopEnabled
    Properties:
      FunctionName: !Ref AutoStopFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AutoStopSchedule.Arn

Outputs:
  ServiceEndpoints:
    Description: AI Testing Agent service endpoints
    Value: !Sub 'http://${LoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-ServiceEndpoints'
  
  ClusterName:
    Description: ECS cluster name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'
  
  ServiceName:
    Description: ECS service name
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub '${AWS::StackName}-ServiceName'
  
  QueueUrl:
    Description: SQS queue URL for distributed testing
    Value: !Ref TestQueue
    Export:
      Name: !Sub '${AWS::StackName}-QueueUrl'
  
  ResultsBucket:
    Description: S3 bucket for test results
    Value: !Ref ResultsBucket
    Export:
      Name: !Sub '${AWS::StackName}-ResultsBucket'
  
  LoadBalancerDNS:
    Description: Load balancer DNS name
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNS' 