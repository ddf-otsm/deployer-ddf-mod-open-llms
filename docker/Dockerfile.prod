# Multi-stage build for production AI Testing Agent
FROM node:20-alpine AS builder

# Metadata
LABEL maintainer="deployer-ddf-mod-llm-models-team"
LABEL project="deployer-ddf-mod-llm-models"
LABEL version="1.0.0"
LABEL description="Self-hosted AI Testing Agent with Ollama + DeepSeek-Coder"

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm install && npm cache clean --force

# Copy source code
COPY src/ ./src/
COPY config/ ./config/

# Build TypeScript
RUN npm run build

# Production stage
FROM node:20-alpine AS production

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S aitest && \
    adduser -S aitest -u 1001 -G aitest

# Set working directory
WORKDIR /app

# Copy package files and install production dependencies
COPY --from=builder --chown=aitest:aitest /app/package*.json ./
RUN npm ci --omit=dev && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=aitest:aitest /app/dist ./dist
COPY --chown=aitest:aitest config/ ./config/

# Create necessary directories
RUN mkdir -p /app/{logs,results,models} && \
    chown -R aitest:aitest /app

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000
ENV OLLAMA_HOST=localhost:11434
ENV LOG_LEVEL=info

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Switch to non-root user
USER aitest

# Expose port
EXPOSE 3000

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/index.js"] 